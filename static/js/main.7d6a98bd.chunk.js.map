{"version":3,"sources":["Components/Header/Header.js","Components/Country/Country.js","Components/Income/Income.js","Components/Form/Form.js","Components/Results/Results.js","util/Tax.js","Components/App/App.js","serviceWorker.js","index.js"],"names":["Header","React","Component","Country","props","handleUserChoice","bind","e","this","onChange","target","value","className","type","id","name","checked","scotland","htmlFor","Income","handleUserInput","min","income","Form","handleScotlandChange","handleIncomeChange","handleSubmit","status","onScotlandChange","onIncomeChange","onFormSubmit","preventDefault","style","display","formSubmitted","onSubmit","Results","incomeTax","Tax","calculateTax","lostAllowanceTax","upperPA","basicTax","scotStarterTax","scotLostAllowanceTax","upperScotPA","App","state","updateScotland","updateIncome","submitForm","setState","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.7d6a98bd.chunk.js","sourcesContent":["import React from 'react';\nimport './Header.css';\n\nclass Header extends React.Component {\n    render() {\n        return (\n            <header>\n                <h1>UK Income Tax Calculator</h1>\n                <h2>Year 2020/21</h2>\n            </header>\n        )\n    }\n}\n\nexport default Header;","import React from 'react';\nimport './Country.css';\n\nclass Country extends React.Component {\n    constructor(props) {\n        super(props);\n        this.handleUserChoice = this.handleUserChoice.bind(this);\n    }\n\n    handleUserChoice(e) {\n        this.props.onChange(e.target.value);\n    }\n    \n    render() {\n        return (\n            <div className=\"country-field\">\n                <h3>Do you live in Scotland?</h3>\n                <p>Income tax bands are different in Scotland than the rest of the UK</p>\n                <div className=\"radio\">\n                    <span>\n                        <input type=\"radio\" id=\"yes\" name=\"yes\" onChange={this.handleUserChoice} value=\"yes\" checked={this.props.scotland === \"yes\"} />\n                        <label htmlFor=\"yes\">Yes</label>\n                    </span>\n                    <span>\n                        <input type=\"radio\" id=\"no\" name=\"no\" onChange={this.handleUserChoice} value=\"no\" checked={this.props.scotland === \"no\"} />\n                        <label htmlFor=\"no\">No</label>\n                    </span>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Country;","import React from 'react';\nimport './Income.css';\n\nclass Income extends React.Component {\n   constructor(props) {\n       super(props);\n       this.handleUserInput = this.handleUserInput.bind(this);\n   }\n\n   handleUserInput(e) {\n       this.props.onChange(e.target.value);\n   }\n    \n    render() {\n        return (\n            <div className=\"income-field\">\n                <h3>What is your annual income (£)?</h3>\n                <input type=\"number\" id=\"income\" name=\"income\" min=\"0\" onChange={this.handleUserInput} value={this.props.income}></input>\n            </div>\n        )\n    }\n}\n\nexport default Income;","import React from 'react';\nimport './Form.css';\nimport Country from '../Country/Country';\nimport Income from '../Income/Income';\n\nclass Form extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.handleScotlandChange = this.handleScotlandChange.bind(this);\n        this.handleIncomeChange = this.handleIncomeChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n    handleScotlandChange(status) {\n        this.props.onScotlandChange(status);\n    }\n\n    handleIncomeChange(income) {\n        this.props.onIncomeChange(income);\n    }\n\n    handleSubmit(e) {\n        this.props.onFormSubmit(true);\n        e.preventDefault();\n    }\n\n    render() {\n        return (\n            <form style={{ display: this.props.formSubmitted ? 'none' : 'flex' }} onSubmit={this.handleSubmit}>\n                <Country scotland={this.props.scotland} onChange={this.handleScotlandChange} />\n                <div className=\"separator\"></div>\n                <Income income={this.props.income} onChange={this.handleIncomeChange} />\n                <div className=\"separator\"></div>\n                <input type=\"submit\" value=\"Submit\" className=\"submit\"></input>\n            </form>\n        )\n    }\n}\n\nexport default Form;","import React from 'react';\nimport './Results.css';\n\nclass Results extends React.Component {\n    render() {\n        return (\n            <div style={{ display: this.props.formSubmitted ? 'flex' : 'none' }} className=\"results\">\n                <h3>Your results</h3>\n                <p>On your salary of £{this.props.income}, your income tax due will be:</p>\n                <div className=\"main-result\">£{this.props.incomeTax}</div>\n            </div>\n        )\n    }\n}\n\nexport default Results;","const Tax = {\n    calculateTax (scotland, income) {\n        let incomeTax;\n\n        // Upper bounds of each tax band >> Additional rate has no upper bound.\n        let upperPA = 12500;\n        let upperBasic = 50000;\n        let upperHigher = 150000;\n\n        // Percentage rates of each tax band >> Personal allowance is not taxed.\n        let basicRate = 20;\n        let higherRate = 40;\n        let additionalRate = 45;\n\n        // Upper bounds of Scottish bands\n        let upperScotPA = 12500;\n        let upperScotStarter = 14585;\n        let upperScotBasic = 25158;\n        let upperScotIntermediate = 43430;\n        let upperScotHigher = 150000;\n\n        // Percentage rates of Scottish bands\n        let scotStarterRate = 19;\n        let scotBasicRate = 20;\n        let scotIntermediateRate = 21;\n        let scotHigherRate = 41;\n        let scotTopRate = 46;\n\n        // Income within personal allowance (incl. Scotland)\n        if (income <= upperPA) {\n            incomeTax = 0;\n            return incomeTax;\n\n        // Not Scotland\n        } else if (scotland === 'no') {\n\n            // Basic rate\n            if (income > upperPA && income <= upperBasic) {\n                let basicAmount = income - upperPA;\n                let basicTax = (basicAmount * basicRate) / 100;\n                incomeTax = basicTax;\n                return incomeTax;\n\n            // Higher rate\n            } else if (income > upperBasic && income <= upperHigher) {\n                let lostAllowanceTax = 0;\n                if (income > 125000) {\n                    lostAllowanceTax = (upperPA * basicRate) / 100;\n                }\n                let basicTax = ((upperBasic - upperPA) * basicRate) / 100;\n                let higherAmount = income - upperBasic;\n                let higherTax = (higherAmount * higherRate) / 100;\n                incomeTax = basicTax + higherTax + lostAllowanceTax;\n                return incomeTax;\n\n            // Additional rate\n            } else if (income > upperHigher) {\n                let lostAllowanceTax = (upperPA * basicRate) / 100;\n                let basicTax = ((upperBasic - upperPA) * basicRate) / 100;\n                let higherTax = ((upperHigher - upperBasic) * higherRate) / 100;\n                let additionalAmount = income - upperHigher;\n                let additionalTax = (additionalAmount * additionalRate) / 100;\n                incomeTax = basicTax + higherTax + additionalTax + lostAllowanceTax;\n                return incomeTax;\n            } else {\n                return 'Invalid input';\n            }\n\n        // Scotland\n        } else if (scotland === 'yes') {\n\n            // Starter rate\n            if (income > upperScotPA && income <= upperScotStarter) {\n                let scotStarterAmount = income - upperScotPA;\n                let scotStarterTax = (scotStarterAmount * scotStarterRate) / 100;\n                incomeTax = scotStarterTax;\n                return incomeTax;\n\n            // Basic rate\n            } else if (income > upperScotStarter && income <= upperScotBasic) {\n                let scotStarterTax = ((upperScotStarter - upperScotPA) * scotStarterRate) / 100;\n                let scotBasicAmount = income - upperScotStarter;\n                let scotBasicTax = (scotBasicAmount * scotBasicRate) / 100;\n                incomeTax = scotStarterTax + scotBasicTax;\n                return incomeTax;\n\n            // Intermediate rate\n            } else if (income > upperScotBasic && income <= upperScotIntermediate) {\n                let scotStarterTax = ((upperScotStarter - upperScotPA) * scotStarterRate) / 100;\n                let scotBasicTax = ((upperScotBasic - upperScotStarter) * scotBasicRate) / 100;\n                let scotIntermediateAmount = income - upperScotBasic;\n                let scotIntermediateTax = (scotIntermediateAmount * scotIntermediateRate) / 100;\n                incomeTax = scotStarterTax + scotBasicTax + scotIntermediateTax;\n                return incomeTax;\n\n            // Higher rate\n            } else if (income > upperScotIntermediate && income <= upperScotHigher) {\n                let scotLostAllowanceTax = 0;\n                if (income > 125000) {\n                    scotLostAllowanceTax = (upperPA * basicRate) / 100;\n                }\n                let scotStarterTax = ((upperScotStarter - upperScotPA) * scotStarterRate) / 100;\n                let scotBasicTax = ((upperScotBasic - upperScotStarter) * scotBasicRate) / 100;\n                let scotIntermediateTax = ((upperScotIntermediate - upperScotBasic) * scotIntermediateRate) / 100;\n                let scotHigherAmount = income - upperScotIntermediate;\n                let scotHigherTax = (scotHigherAmount * scotHigherRate) / 100;\n                incomeTax = scotStarterTax + scotBasicTax + scotIntermediateTax + scotHigherTax + scotLostAllowanceTax;\n                return incomeTax;\n\n            // Top rate\n            } else if (income > upperScotHigher) {\n                let scotLostAllowanceTax = (upperScotPA * scotStarterRate) / 100;\n                let scotStarterTax = ((upperScotStarter - upperScotPA) * scotStarterRate) / 100;\n                let scotBasicTax = ((upperScotBasic - upperScotStarter) * scotBasicRate) / 100;\n                let scotIntermediateTax = ((upperScotIntermediate - upperScotBasic) * scotIntermediateRate) / 100;\n                let scotHigherTax = ((upperScotHigher - upperScotBasic) * scotHigherRate) / 100;\n                let scotTopAmount = income - upperScotHigher;\n                let scotTopTax = (scotTopAmount * scotTopRate) / 100;\n                incomeTax = scotStarterTax + scotBasicTax + scotIntermediateTax + scotHigherTax + scotTopTax + scotLostAllowanceTax;\n                return incomeTax;\n            } else {\n                return 'Invalid input';\n            }\n        } else {\n            return 'Invalid input';\n        }\n    }\n}\n\nexport default Tax;","import React from 'react';\nimport './App.css';\nimport Header from '../Header/Header';\nimport Form from '../Form/Form';\nimport Results from '../Results/Results';\nimport Tax from '../../util/Tax';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      formSubmitted: false,\n      scotland: 'no',\n      income: '',\n      incomeTax: ''\n    }\n\n    this.updateScotland = this.updateScotland.bind(this);\n    this.updateIncome = this.updateIncome.bind(this);\n    this.submitForm = this.submitForm.bind(this);\n  }\n\n  updateScotland(status) {\n    this.setState({\n        scotland: status\n    })\n  }\n\n  updateIncome(income) {\n    this.setState({\n        income: income\n    })\n  }\n\n  submitForm() {\n    let incomeTax = Tax.calculateTax(this.state.scotland, this.state.income);\n    this.setState({\n      formSubmitted: true,\n      incomeTax: incomeTax\n    })\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Header />\n        <Form scotland={this.state.scotland} onScotlandChange={this.updateScotland} income={this.state.income} onIncomeChange={this.updateIncome} formSubmitted={this.state.formSubmitted} onFormSubmit={this.submitForm} />\n        <Results formSubmitted={this.state.formSubmitted} income={this.state.income} incomeTax={this.state.incomeTax} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}